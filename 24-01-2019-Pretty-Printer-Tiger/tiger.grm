%%
%term	EOF
	| SEMICOLON
	| INT of int
	| PLUS | MINUS | TIMES | DIVIDE
	| EQ | ASSIGN | ID of string
	| LET | IN | END | VAR | FUNCTION
	| COLON | COMMA
	| LPAREN | RPAREN
	| IF | THEN | ELSE 


%nonterm 	init		of Ast.exp list
		| 	program  	of Ast.exp list
        | 	exp     	of Ast.exp
		|	exps 		of Ast.exp list
		| 	vardec		of Ast.dec
		| 	decs 		of Ast.dec list
		| 	dec 		of Ast.dec
		| 	tyfields	of Ast.tyfields
		| 	typeid		of Ast.exp

	
%pos int
%verbose


%eop EOF
%noshift EOF

%left SEMICOLON
%left TIMES DIVIDE
%left PLUS MINUS
%left COMMA
%right COLON

%name Tiger

%%

init	: 	program					(program)

program	:	exp SEMICOLON program	(exp::program)
		|							([])

exp     :   INT                     (Ast.INT(INT))
		| 	ID 						(Ast.ID(ID))
        |   exp PLUS exp            (Ast.BINOP(exp1,Ast.PLUS,exp2))
		|	exp MINUS exp			(Ast.BINOP(exp1,Ast.MINUS,exp2))
		|	exp TIMES exp			(Ast.BINOP(exp1,Ast.TIMES,exp2))
		|	exp DIVIDE exp			(Ast.BINOP(exp1,Ast.DIVIDE,exp2))
		| 	LET decs IN exps END	(Ast.LET(decs, exps))

exps 	: 	exp SEMICOLON exps		(exp :: exps)
		| 	exp 					(exp :: [])
		| 							([])

decs 	: 	dec decs				(dec :: decs)
		| 	 						([])

dec  	: 	vardec					(vardec)
		| 	FUNCTION ID LPAREN tyfields RPAREN EQ exp  	(Ast.FUNCDEC(ID, tyfields, exp))

tyfields :	ID COLON typeid COMMA tyfields	((ID, typeid) :: tyfields)
		|	ID COLON typeid					((ID, typeid))
 		|									([])

typeid 	 : 	ID						(Ast.ID(ID))

vardec 	: 	VAR ID ASSIGN exp 		(Ast.VARDEC(ID, exp))




